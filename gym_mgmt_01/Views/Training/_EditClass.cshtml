@{
    List<SelectListItem> data = TempData["stafflist"] as List<SelectListItem>;

    List<SelectListItem> repeats = new List<SelectListItem>();
    repeats.Add(new SelectListItem() { Text = "N/A (Single Appointment)", Value = "0" });
    repeats.Add(new SelectListItem() { Text = "Weekly", Value = "7 days" });
    repeats.Add(new SelectListItem() { Text = "Fortnightly", Value = "14 days" });
    repeats.Add(new SelectListItem() { Text = "3 Weeks", Value = "21 days" });
    repeats.Add(new SelectListItem() { Text = "4 Weeks", Value = "28 days" });
    repeats.Add(new SelectListItem() { Text = "6 Weeks", Value = "42 days" });
    repeats.Add(new SelectListItem() { Text = "8 Weeks", Value = "56 days" });
    repeats.Add(new SelectListItem() { Text = "Monthly", Value = "1 mon" });
    repeats.Add(new SelectListItem() { Text = "Daily", Value = "1 day" });

    List<SelectListItem> resource = new List<SelectListItem>();
    resource.Add(new SelectListItem() { Text = "--SELECT Resource--", Value = "0" });
    resource.Add(new SelectListItem() { Text = "Studio", Value = "1" });
}
@model gym_mgmt_01.Models.Classes
@using (Html.BeginForm("_EditClass", "Training", FormMethod.Post, new { @id = "editClass", @class = "needs-validation", @novalidate = "" }))
{
    @Html.AntiForgeryToken()
    <div class="modal" id="editclass1" tabindex="-1" role="dialog" aria-labelledby="addclasslabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="addclasslabel">Add Class</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    @Html.HiddenFor(model => model.Id)
                </div>
                <div class="modal-body">
                    <form id="addClass" method="post">
                        <div class="form-group">
                            <label for="" class="control-label label1">Class:</label>

                            @Html.EditorFor(model => model.ClassName, new { htmlAttributes = new { @id = "Class", @class = "form-control label2", @placeholder = " Enter Class Name ", @required = "" } })
                            @Html.ValidationMessageFor(model => model.ClassName, "", new { htmlAttributes = new { @class = "text-danger" } })
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">From:</label>
                            @Html.EditorFor(model => model.From, new { htmlAttributes = new { @type = "time", @min = "01:00", @max = "23:00", @name = "From", @required = "", @onblur = "validateTime(this , 'F')", @class = "form-control label2", @id = "timeFrom" } })
                            @Html.ValidationMessageFor(model => model.From, "", new { @class = "text-danger" })

                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">To:</label>
                            @Html.EditorFor(model => model.To, new { htmlAttributes = new { @type = "time", @min = "01:00", @max = "23:00", @name = "To", @required = "", @class = "form-control label2", @onblur = "validateTime(this , 'T')", @id = "timeTo" } })
                            @Html.ValidationMessageFor(model => model.To, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">Repeats:</label>
                            <div class="controls">
                                @Html.DropDownListFor(model => model.Repeats, repeats, new { @class = " custom-select label2", @placeholder = " Select Gender ", @required = "" })
                                @Html.ValidationMessageFor(model => model.Repeats, "", new { @class = "text-danger" })

                                <div class="help-block" style="padding-left:30%;"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">Repeat Ends:</label>
                            @Html.EditorFor(model => model.RepeatsEnd, new { htmlAttributes = new { @type = "date", @name = "RepeatsEnd", @class = "form-control label2", @required = "", @id = "RepeatsEnds" } })
                            @Html.ValidationMessageFor(model => model.RepeatsEnd, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">Resource:</label>
                            @Html.DropDownListFor(model => model.Resource, resource, new { @class = " custom-select label2", @placeholder = " Select Gender ", @required = "" })
                            @Html.ValidationMessageFor(model => model.Resource, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">Teacher/ Instructor:</label>
                            @Html.DropDownListFor(model => model.StaffID, data, new { @class = " custom-select label2", @placeholder = " Select Gender ", @required = "" })
                            @Html.ValidationMessageFor(model => model.StaffID, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">Note:</label>
                            @Html.TextAreaFor(model => model.Note, new { @class = "form-control label2" })
                            @Html.ValidationMessageFor(model => model.Note, "", new { htmlAttributes = new { @class = "text-danger" } })
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-info">Save Class</button>
                    <button type="button" class="btn btn-default btn-info" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
@section scripts{
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>

    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://cdn.jsdelivr.net/momentjs/2.12.0/moment.min.js"></script>
    <script type="text/javascript">
        $.validator.unobtrusive.adapters.add('restrictbackdates', ['mindate'], function (options) {
            options.rules['restrictbackdates'] = { mindate: options.params.mindate };
            options.messages['restrictbackdates'] = options.message;
        });

        $.validator.addMethod("restrictbackdates", function (value, element, param) {
            var date = new Date(value);
            var minDate = new Date(param.mindate);
            return date >= minDate;
        });

        $.validator.unobtrusive.adapters.add('isgreater', ['otherproperty'], function (options) {
            options.rules['isgreater'] = { otherproperty: options.params.otherproperty };
            options.messages['isgreater'] = options.message;
        });

        $.validator.addMethod("isgreater", function (value, element, param) {
            var otherProp = $('#' + param.otherproperty);
            if (otherProp.val() != '') {
                var StartDate = new Date(moment(otherProp.val(), 'MM/DD/YYYY'));

                var Enddate = new Date(value);
                if (StartDate != '') {
                    return Enddate >= StartDate;
                }
            }
            return true;
        });
    </script>
}