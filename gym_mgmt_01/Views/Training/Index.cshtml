
@{
    ViewBag.Title = "Physiofit | Training ";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model dynamic
<div class="row upp2">
    <!-- Column -->
    <div class="row rolebtns3">
        <div class="col-lg-6 col-xlg-6 col-md-6">
            <form action="#">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Type the product type.." aria-label="">
                    <div class="input-group-append">
                        <span class="input-group-text"><i class="mdi  mdi-magnify"></i></span>
                    </div>
                </div>
            </form>
        </div>
        <div class="col-lg-6 col-xlg-6 col-md-6">

            @if (Session["user"] != null)
            {
                if (Session["user"].ToString() == "Admin")
                {
                    <button type="button" class="btn btn-info btnaddrole" data-toggle="modal" data-target="#addclass" data-whatever="">Add Class</button>
                }
                else
                {
                    if (@ViewBag.Create != false)
                    {
                        <button type="button" class="btn btn-info btnaddrole" data-toggle="modal" data-target="#addclass" data-whatever="">Add Class</button>
                    }
                    else
                    {
                        <button type="button" disabled class="btn btn-info btnaddrole" data-toggle="modal" data-target="#addclass" data-whatever="">Add Class</button>
                    }
                }
            }
        </div>
    </div>
    <div class="addclasstab">
        <!-- <div id=""> <h2 class="addclasshead"> No data</h2></div> -->
        <div id="addclasstable" class="addclasstable">
            <table class="table table-hover table-responsive">
                <thead>
                    <tr>
                        <th>Class</th>
                        <th>From</th>
                        <th>To</th>
                        <th>Repeats</th>
                        <th>Repeat Ends</th>
                        <th>Teacher/ Instructor</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.classes.Count > 0)
                    {
                        foreach (var data in Model.classes)
                        {
                            <tr>
                                <td>@data.ClassName</td>
                                <td>@data.From.ToString("hh:mm tt")</td>
                                <td>@data.To.ToString("hh:mm tt")</td>
                                <td>@data.Repeats</td>
                                <td>@data.RepeatsEnd.ToString("dd/MM/yyyy")</td>
                                <td>@data.StaffID</td>
                                <td>

                                    @if (Session["user"] != null)
                                    {
                                        if (Session["user"].ToString() == "Admin")
                                        {
                                            <button type="button" class="btn btn-info editbtn1" onclick="editClass(@data.Id)">Edit</button>
                                            <button type="button" class="btn btn-primary deletebtn1" onclick="location.href='@Url.Action("DeleteClasses", "Training", new { id = data.Id })'">Delete</button>
                                        }
                                        else
                                        {
                                            if (@ViewBag.Edit != false)
                                            {
                                                <button type="button" class="btn btn-info editbtn1" onclick="editClass(@data.Id)">Edit</button>
                                            }
                                            else
                                            {
                                                <button type="button" disabled class="btn btn-info editbtn1" onclick="editClass(@data.Id)">Edit</button>
                                            }

                                            if (@ViewBag.Delete != false)
                                            {
                                                <button type="button" class="btn btn-primary deletebtn1" onclick="location.href='@Url.Action("DeleteClasses", "Training", new { id = data.Id })'">Delete</button>
                                            }
                                            else
                                            {
                                                <button type="button" disabled class="btn btn-primary deletebtn1" onclick="location.href='@Url.Action("DeleteClasses", "Training", new { id = data.Id })'">Delete</button>
                                            }
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" align="center">
                                <div class="alert alert-info">
                                    <i class="ti-info" style="margin-right: 5px;border-radius: 50%;border: 1px solid #249ddc; padding: 3px; font-size: 10px;"></i> No Class Found !!!
                                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">  </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <!-- Column -->
</div>
<!-- /.modal -->
<!---- Add Class Modal -->
@using (Html.BeginForm("Index", "Training", FormMethod.Post, new { @id = "addClass", @class = "needs-validation", @novalidate = "" }))
{
    @Html.AntiForgeryToken()
    <div class="modal" id="addclass" tabindex="-1" role="dialog" aria-labelledby="addclasslabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="addclasslabel">Add Class</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    <form id="addClass" method="post">
                        <div class="form-group">
                            <label for="" class="control-label label1">Class:</label>
                            <input type="text" name="className" required="" class="form-control label2" id="" />
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">From:</label>
                            <input type="time" min="00:00" max="23:49" name="From" required="" class="form-control label2" id="aFrom" />
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">To:</label>
                            <input type="time" min="00:00" max="23:49" name="To" required="" class="form-control label2" id="aTo" />
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">Repeats:</label>
                            <div class="controls">
                                <select class="form-control label2" name="Repeats" id="" aria-invalid="false">
                                    <option value="">N/A (Single Appointment)</option>
                                    <option value="7 days">Weekly</option>
                                    <option value="14 days">Fortnightly</option>
                                    <option value="21 days">3 Weeks</option>
                                    <option value="28 days">4 Weeks</option>
                                    <option value="42 days">6 Weeks</option>
                                    <option value="56 days">8 Weeks</option>
                                    <option value="1 mon">Monthly</option>
                                    <option value="1 day">Daily</option>
                                </select>
                                <div class="help-block" style="padding-left:30%;"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">Repeat Ends:</label>
                            <input type="date" name="RepeatsEnd" class="form-control label2" id="" />
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">Resource:</label>
                            <select class="form-control label2" name="Resource" id="" aria-invalid="false">
                                <option value="">Studio</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">Teacher/ Instructor:</label>
                            <select class="form-control label2" name="StaffID" id="" aria-invalid="false">
                                <option value="">--SELECT OPTIONS--</option>
                                @if (Model.staff.Count > 0)
                                {
                                    foreach (var st in Model.staff)
                                    {
                                        <option value="@st.StaffID">@st.FirstName</option>
                                    }
                                }
                                else
                                {
                                    <option value="0">NONE</option>
                                }

                            </select>
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">Note:</label>
                            <textarea type="date" name="Note" class="form-control label2" id=""></textarea>
                        </div>
                    </form>

                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-info" id="addClassMethod">Save Class</button>
                    <button type="button" class="btn btn-default btn-info" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
@*@using (Ajax.BeginForm("_EditClass1", "Training", new AjaxOptions() { HttpMethod = "POST", UpdateTargetId = "frmEmp"}))*@ 
@using (Html.BeginForm("_EditClass1", "Training", FormMethod.Post, new { @id = "editClass", @class = "needs-validation", @novalidate = "" }))
{
    @Html.AntiForgeryToken()
    <div class="modal" id="editclass2" tabindex="-1" role="dialog" aria-labelledby="addclasslabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="addclasslabel">Add Class 2</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    @Html.Partial("_EditClass1", new gym_mgmt_01.Models.Classes())
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-info" id="btnSubmit">Save Class</button>
                    <button type="button" class="btn btn-default btn-info" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}
@Html.Partial("_EditClass", new gym_mgmt_01.Models.Classes())
<!-- /.modal -->
@section scripts{
    <script type="text/javascript">
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
          }, false);
        })();
        function editClass(id) {
            $.ajax({
                url: "/Training/getClasses/" + id,
                typr: "GET",
                contentType: "application/json;charset=UTF-8",
                dataType: "json",
                success: function (response) {

                    $('#Class').val(response.ClassName);
                    var from = new Date(parseInt(response.From.replace(/(^.*\()|([+-].*$)/g, '')));
                    var to = new Date(parseInt(response.To.replace(/(^.*\()|([+-].*$)/g, '')));
                    var repeatsEnd = new Date(parseInt(response.RepeatsEnd.replace(/(^.*\()|([+-].*$)/g, '')));

                    var hour = from.getHours();
                    var min = from.getMinutes();
                    var sec = from.getSeconds();

                    var hour1 = to.getHours();
                    var min1 = to.getMinutes();
                    var sec1 = to.getSeconds();

                    var day = repeatsEnd.getDate();
                    var month = repeatsEnd.getMonth();
                    var year = repeatsEnd.getFullYear();

                    var date = minTwoDigits(year) + '-' + minTwoDigits(month + 1) + '-' + minTwoDigits(day);
                    var from = minTwoDigits(hour) + ':' + minTwoDigits(min) + ':' + minTwoDigits(sec);
                    var to1 = minTwoDigits(hour1) + ':' + minTwoDigits(min1) + ':' + minTwoDigits(sec1);

                    //alert(JSON.stringify(response));
                    $("#Id").val(response.Id);
                    $('#timeFrom').val(from);
                    $('#timeTo').val(to1);
                    $('#Repeats').val(response.Repeats);
                    $('#RepeatsEnds').val(date);
                    $('#Resource').val(response.Resource);
                    $('#StaffID').val(response.StaffID);
                    $('#Note').val(response.Note);``
                    $('#editclass2').modal('show');
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
            return false;
        }
        function minTwoDigits(n) {
            return (n < 10 ? '0' : '') + n;
        }
        function validateHhMm(inputField) {
            var isValid = /^([0-1]?[0-9]|2[0-4]):([0-5][0-9])(:[0-5][0-9])?$/.test(inputField.value);

            if (isValid) {
                inputField.style.backgroundColor = '#bfa';
            } else {
                inputField.style.backgroundColor = '#fba';
            }
            return isValid;
        }
        $('#addClassMethod').on('click', function () {
             var startTime = $('#aFrom').val();
            var endTime = $('#aTo').val();
            var st1 = parseTime(startTime);
            var ed1 = parseTime(endTime);
         //   alert(" Start Time L: " + st1  + " End Time : " + ed1);
          //  alert("start time : " + startTime + "  endtime : " + endTime);
            var st = minFromMidnight(startTime);
            var et = minFromMidnight(endTime);
            if (st1 > ed1) {
                alert('To Time is not valid time.');
                return false;
            }
            function minFromMidnight(tm) {
                var ampm = tm.substr(-2);
                var clk;
                if (tm.length <= 6) {
                    clk = tm.substr(0, 4);
                } else {
                    clk = tm.substr(0, 5);
                }
                var m = parseInt(clk.match(/\d+$/)[0], 10);
                var h = parseInt(clk.match(/^\d+/)[0], 10);
                h += (ampm.match(/pm/i)) ? 12 : 0;
                return h * 60 + m;
            }
            function parseTime( t ) {
                var d = new Date();
                var time = t.match( /(\d+)(?::(\d\d))?\s*(p?)/ );
                d.setHours( parseInt( time[1]) + (time[3] ? 12 : 0) );
                d.setMinutes( parseInt( time[2]) || 0 );
            return d;
            }
        })
        $('#btnSubmit').on('click', function () {

        //    alert("M oN sUBMIT cLICK");
            var startTime = $('#timeFrom').val();
            var endTime = $('#timeTo').val();
            var st1 = parseTime(startTime);
            var ed1 = parseTime(endTime);
         //   alert(" Start Time L: " + st1  + " End Time : " + ed1);
          //  alert("start time : " + startTime + "  endtime : " + endTime);
            var st = minFromMidnight(startTime);
            var et = minFromMidnight(endTime);
            if (st1 > ed1) {
                alert('To Time is not valid time.');
                return false;
            }
            function minFromMidnight(tm) {
                var ampm = tm.substr(-2);
                var clk;
                if (tm.length <= 6) {
                    clk = tm.substr(0, 4);
                } else {
                    clk = tm.substr(0, 5);
                }
                var m = parseInt(clk.match(/\d+$/)[0], 10);
                var h = parseInt(clk.match(/^\d+/)[0], 10);
                h += (ampm.match(/pm/i)) ? 12 : 0;
                return h * 60 + m;
            }
            function parseTime( t ) {
                var d = new Date();
                var time = t.match( /(\d+)(?::(\d\d))?\s*(p?)/ );
                d.setHours( parseInt( time[1]) + (time[3] ? 12 : 0) );
                d.setMinutes( parseInt( time[2]) || 0 );
            return d;
            }
        });
    </script>
}

