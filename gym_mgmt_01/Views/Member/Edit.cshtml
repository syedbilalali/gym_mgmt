
@{
    ViewBag.Title = " Physiofit | Member ";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.MemberType = "";
    List<SelectListItem> Genderlist = new List<SelectListItem>();
    Genderlist.Add(new SelectListItem() { Text = "--SELECT Gender--", Value = "" });
    Genderlist.Add(new SelectListItem() { Text = "Male", Value = "Male" });
    Genderlist.Add(new SelectListItem() { Text = "Female", Value = "Female" });
    Genderlist.Add(new SelectListItem() { Text = "Other", Value = "Other" });

}
@model gym_mgmt_01.Models.MemberRegistration
@using (Html.BeginForm("Edit", "Member", FormMethod.Post, new { enctype = "multipart/form-data", id = "memreg", @class = "needs-validation", @novalidate = "" }))
{
    @Html.AntiForgeryToken()
    <form id="memberReg" method="post">
        <div class="row uppercontainer">
            <div class="col-md-12">

                @if (ViewBag.Message != "") 
                {
                    <div class="alert alert-success" style="display:block;">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"> <span aria-hidden="true">&times;</span> </button>
                        @ViewBag.Message
                    </div>
                }
            </div>
        </div>
        <div class="row uppercontainer">
            <div class="col-md-6">
                <h4>
                    ID : #@ViewBag.ID
                </h4>
            </div>
            <div class="col-md-6">
                @if (Session["user"] != null)
                {
                    if (Session["user"].ToString() == "Admin")
                    {
                        <button id="addMemberShipA" class=" btn btn-success btn-save btn-member-save addsavemember">Save and Add Membership</button>
                    }
                    else
                    {
                        if (@ViewBag.Edit != false)
                        {
                            <button id="addMemberShipA" class=" btn btn-success btn-save btn-member-save addsavemember">Save and Add Membership</button>
                        }
                        else
                        {
                            <button id="addMemberShipA" disabled class=" btn btn-success btn-save btn-member-save addsavemember">Save and Add Membership</button>
                        }
                    }
                }
            </div>
        </div>
        <div class="row">
            <!-- Column -->
            <div class="col-lg-3 col-xlg-3 col-md-3">
                <div class="card">
                    <div class="card-body profilecard">
                        <center class="m-t-30">
                            <img src="@Html.DisplayFor(model => model.member.ImagePath)" alt="" width="150px" height="150px" id="profImg" class="img-circle" />
                            <h4 class="card-title m-t-10"></h4>
                            <div class="row text-center justify-content-md-center">
                                <div class="upload-btn-wrapper">
                                    @if (Session["user"] != null)
                                    {
                                        if (Session["user"].ToString() == "Admin")
                                        {
                                            <button class="btn upld" id="upldFile">
                                                @Html.LabelFor(model => model.member.ImagePath, htmlAttributes: new { @class = "" })
                                            </button>
                                            <br />
                                            @Html.ValidationMessageFor(modal => modal.member.ImagePath, "", new { htmlAttributes = new { @class = "text-danger" } })
                                            <input type="file" name="ImageFile" id="upldImage" />
                                            @Html.HiddenFor(model => model.member.Id)
                                            @Html.ValidationMessageFor(modal => modal.member.Id)
                                        }
                                        else
                                        {
                                            if (@ViewBag.Edit != false)
                                            {
                                                <button class="btn upld" id="upldFile">
                                                    @Html.LabelFor(model => model.member.ImagePath, htmlAttributes: new { @class = "" })
                                                </button>
                                                <br />
                                                @Html.ValidationMessageFor(modal => modal.member.ImagePath, "", new { htmlAttributes = new { @class = "text-danger" } })
                                                <input type="file" name="ImageFile" id="upldImage" />
                                                @Html.HiddenFor(model => model.member.Id)
                                                @Html.ValidationMessageFor(modal => modal.member.Id)
                                            }
                                            else
                                            {
                                                <button class="btn upld" disabled id="upldFile">
                                                    @Html.LabelFor(model => model.member.ImagePath, htmlAttributes: new { @class = "" })
                                                </button>
                                                <br />
                                                @Html.ValidationMessageFor(modal => modal.member.ImagePath, "", new { htmlAttributes = new { @class = "text-danger" } })
                                                <input type="file" disabled name="ImageFile" id="upldImage" />
                                                @Html.HiddenFor(model => model.member.Id)
                                                @Html.ValidationMessageFor(modal => modal.member.Id)
                                            }
                                        }
                                    }

                                </div>
                            </div>
                            <div class="m-b-30 checkaddmember" style="display:none;">
                                <span class="text-muted">Member&nbsp;&nbsp;</span>

                                <input id="memberType" name="memberType" type="checkbox" checked class="js-switch" data-color="#f62d51" data-size="small" />
                                <span class="text-truncate">&nbsp;&nbsp;Prospectus</span>
                            </div>
                        </center>
                    </div>
                </div>
            </div>
            <!-- Column -->
            <div class="col-lg-9 col-xlg-9 col-md-10">
                <div class="card">
                    <!-- Nav tabs -->
                    <ul class="nav nav-tabs profile-tab" role="tablist">

                        <li class="nav-item"> <a class="nav-link active" data-toggle="tab" href="#settings" role="tab"> <i class="ti-user"></i>&nbsp;Details</a> </li>
                        <li class="nav-item"> <a class="nav-link" data-toggle="tab" href="#membership" role="tab">Membership</a> </li>
                        <li class="nav-item"> <a class="nav-link" data-toggle="tab" href="#qrcode" role="tab">QR Code</a> </li>
                        @*<li class="nav-item"> <a class="nav-link" data-toggle="tab" href="#profile" role="tab">Trainings</a> </li>*@
                    </ul>
                    <!-- Tab panes -->
                    <div class="tab-content">
                        <div class="tab-pane active" id="settings" role="tabpanel">
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title"><i class="ti-user"></i>&nbsp;&nbsp;Details</h4>
                                            <div class="form p-t-20">
                                                <div class="form-group">
                                                    <label for="exampleInputuname">First Name <span class=" text-danger">*</span></label>
                                                    <div class="input-group">
                                                        @Html.EditorFor(model => model.member.FirstName, new { htmlAttributes = new { @class = "form-control", @maxlength = "40", @name = "firstName", @placeholder = "Enter First Name. ", @required = "" } })

                                                        <div class="input-group">
                                                            @Html.ValidationMessageFor(modal => modal.member.FirstName, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label for="exampleInputuname">Last Name <span class=" text-danger">*</span></label>
                                                    <div class="input-group mb-3">
                                                        @Html.EditorFor(model => model.member.LastName, new { htmlAttributes = new { @class = "form-control", @maxlength = "40", @name = "lastName", @placeholder = "Enter Last Name", @required = "" } })
                                                        <div class="input-group">
                                                            @Html.ValidationMessageFor(modal => modal.member.LastName, "", new { @class = "text-danger" })
                                                        </div>

                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label for="exampleInputuname">Date of Birth<span class=" text-danger">*</span></label>
                                                    <div class="input-group mb-3">
                                                        @Html.EditorFor(model => model.member.DOB, new { htmlAttributes = new { @class = "form-control mydatepicker", @type = "text", @maxlength = "10", @name = "dob", @placeholder = " Enter Date of Birth ", @required = "" } })

                                                        <div class="input-group">
                                                            @Html.ValidationMessageFor(modal => modal.member.DOB, "", new { @class = "text-danger" })
                                                        </div>

                                                    </div>

                                                </div>
                                                <div class="form-group">
                                                    <label for="exampleInputEmail1">Gender<span class=" text-danger">*</span></label>
                                                    <div class="input-group mb-3">
                                                        @Html.DropDownListFor(model => model.member.Gender, Genderlist, new { @class = " custom-select ", @placeholder = " Select Gender ", @required = "" })
                                                        <div class="input-group">
                                                            @Html.ValidationMessageFor(modal => modal.member.Gender, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label for="pwd2">Note</label>
                                                    @Html.TextAreaFor(model => model.member.note, new { @class = "form-control", @rows = "8", @maxlength = "100", placeholder = " Enter Notes. " })

                                                    <div class="input-group">
                                                        @Html.ValidationMessageFor(modal => modal.member.note, "", new { @class = "text-danger" })
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="card">
                                        <div class="card-body">
                                            @Html.HiddenFor(model => model.contact.Id)

                                            @Html.HiddenFor(model => model.contact.MemberID)

                                            <h4 class="card-title"><i class="ti-agenda"></i>&nbsp;&nbsp;Contact</h4>
                                            <div class="form p-t-20">
                                                <div class="form-group">
                                                    @Html.HiddenFor(model => model.contact.initEmail)
                                                    <label for="exampleInputEmail1">Email address<span class=" text-danger">*</span></label>
                                                    <div class="input-group mb-3">
                                                        @Html.EditorFor(model => model.contact.Email, new { htmlAttributes = new { @class = "form-control", data_val = "false", @type = "email", @placeholder = " Enter Email Address" } })

                                                        <div class="input-group">
                                                            @Html.ValidationMessageFor(modal => modal.contact.Email, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label for="exampleInputuname">Cell<span class=" text-danger">*</span></label>
                                                    <div class="input-group mb-3">
                                                        @Html.EditorFor(model => model.contact.Cell, new { htmlAttributes = new { @class = "form-control", data_val = "false", @type = "text", @placeholder = "Ex. +971509090900 " } })

                                                        <div class="input-group">
                                                            @Html.ValidationMessageFor(modal => modal.contact.Cell, "", new { @class = "text-danger" })
                                                        </div>

                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label for="exampleInputuname">Home</label>
                                                    <div class="input-group mb-3">
                                                        @Html.EditorFor(model => model.contact.Home, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Ex. +971509090900" } })

                                                        <div class="input-group">
                                                            @Html.ValidationMessageFor(modal => modal.contact.Home, "", new { @class = "text-danger" })
                                                        </div>

                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label for="exampleInputuname">Work</label>
                                                    <div class="input-group mb-3">
                                                        @Html.EditorFor(model => model.contact.Work, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = "Ex. +971509090900" } })

                                                        <div class="input-group">
                                                            @Html.ValidationMessageFor(modal => modal.contact.Work, "", new { @class = "text-danger" })
                                                        </div>


                                                    </div>
                                                </div>
                                                <div class="form-group mt-3 row">
                                                    <label for="example-text-input" class="col-4 col-form-label">Address</label>
                                                    <div class="col-8">
                                                        @Html.EditorFor(model => model.contact.Address, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = " 123 Main Road", @minlength = "5", @maxlength = "100" } })

                                                    </div>
                                                    <div class="input-group">
                                                        @Html.ValidationMessageFor(modal => modal.contact.Address, "", new { @class = "text-danger" })
                                                    </div>

                                                </div>
                                                <div class="form-group mt-3 row">

                                                    <label for="example-text-input" class="col-4 col-form-label">Suburb</label>
                                                    <div class="col-8">
                                                        @Html.EditorFor(model => model.contact.Suburb, new { htmlAttributes = new { @class = "form-control", @type = "text", @placeholder = " CBD " } })

                                                        <div class="input-group">
                                                            @Html.ValidationMessageFor(modal => modal.contact.Suburb, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group mt-3 row">
                                                    <label for="example-text-input" class="col-4 col-form-label">City</label>
                                                    <div class="col-8">
                                                        @Html.EditorFor(model => model.contact.City, new { htmlAttributes = new { @class = "form-control", @type = "text" } })

                                                        <div class="input-group">
                                                            @Html.ValidationMessageFor(modal => modal.contact.City, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group mt-3 row">
                                                    <label for="example-text-input" class="col-4 col-form-label">Zip Code</label>
                                                    <div class="col-8">
                                                        @Html.EditorFor(model => model.contact.Zipcode, new { htmlAttributes = new { @class = "form-control", @maxlength = "6", @placeholder = "81203", @type = "text" } })

                                                        <div class="input-group">
                                                            @Html.ValidationMessageFor(modal => modal.contact.Zipcode, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                            @if (Session["user"] != null)
                            {
                                if (Session["user"].ToString() == "Admin")
                                {
                                    <button id="addMemberShipB" class=" btn btn-success btn-save btn-member-save addsavemember">Save and Add Membership</button>
                                }
                                else
                                {
                                    if (@ViewBag.Edit != false)
                                    {
                                        <button id="addMemberShipB" class=" btn btn-success btn-save btn-member-save addsavemember">Save and Add Membership</button>
                                    }
                                    else
                                    {
                                        <button id="addMemberShipB" disabled class=" btn btn-success btn-save btn-member-save addsavemember">Save and Add Membership</button>
                                    }
                                }
                            }
                        </div>
                        <div class="tab-pane" id="membership" role="tabpanel">
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title"><i class="ti-calendar"></i>&nbsp;&nbsp;Memberships</h4>

                                            @Html.Partial("_MembershipDetails", Model.subs)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane" id="profile" role="tabpanel">
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title"><i class="ti-calendar"></i>&nbsp;&nbsp;Training Details</h4>
                                            @Html.Partial("_TrainingDetails")
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane" id="qrcode" role="tabpanel">
                            <div class="row">
                                <div class="col-lg-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <h4 class="card-title"><i class="ti-calendar"></i>&nbsp;&nbsp;QR Code</h4>
                                            @Html.Partial("_QrDetails" ,Model)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Column -->
        </div>
    </form>
}
<!-- Row -->
<!-- ============================================================== -->
<!-- End PAge Content -->
<!-- ============================================================== -->
<!-- ============================================================== -->
<!-- Right sidebar -->
<!-- ============================================================== -->
<!-- .right-sidebar -->
@section scripts {
    <script src="~/Scripts/jquery.validate-vsdoc.js"></script>
    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Scripts/modernizr-2.8.3.js"></script>
    <script type="text/javascript">
        $(function () {
            var MemberType = "";
            var addMemberShipA = document.querySelector('#addMemberShipA');
            var addMemberShipB = document.querySelector('#addMemberShipB');
            var prospectusDetails = document.querySelector('#prospectusDetails');
            var emergencyContact = document.querySelector('#emergencyContact');
            var memberType = document.querySelector('#memberType');
            if (memberType.checked) {

                MemberType = "Prospectus";
                //  prospectusDetails.style.display = "block";
                // emergencyContact.style.display = "none";
                addMemberShipA.innerHTML = "Update";
                addMemberShipB.innerHTML = "Update";
            } else {

                MemberType = "Member";
                addMemberShipA.innerHTML = "Add and Save Membership ";
                addMemberShipB.innerHTML = "Add and Save Membership ";
                //   prospectusDetails.style.display = "none";
                // emergencyContact.style.display = "block";
            }
            memberType.addEventListener('change', (event) => {
                if (event.target.checked) {
                    MemberType = "Prospectus";
                    prospectusDetails.style.display = "block";
                    emergencyContact.style.display = "none";
                    addMemberShipA.innerHTML = "Save";
                    addMemberShipB.innerHTML = "Save";
                    //  alert('checked');
                } else {
                    MemberType = "Prospectus";
                    prospectusDetails.style.display = "none";
                    emergencyContact.style.display = "block";
                    addMemberShipA.innerHTML = "Add and Save Membership ";
                    addMemberShipB.innerHTML = "Add and Save Membership ";
                    // alert('not checked');
                }
            })
            "use strict";
            $(".tst1").click(function () {
                $.toast({
                    heading: 'Welcome to Material Pro admin',
                    text: 'Use the predefined ones, or specify a custom position object.',
                    position: 'top-right',
                    loaderBg: '#ff6849',
                    icon: 'info',
                    hideAfter: 3000,
                    stack: 6
                });

            });
            $('#upldImage').change(function () {
                readURL(this);
            });
            function readURL(input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var form = document.querySelector('#memreg');
                        var bool = Validate(form);
                        if (!bool) {
                            $('#profImg').attr('src', '/assets/images/users/deafult.png');
                        } else {
                            $('#profImg').attr('src', e.target.result);
                        }
                    }
                    reader.readAsDataURL(input.files[0]);
                }
            }
            var _validFileExtensions = [".jpg", ".jpeg", ".bmp", ".gif", ".png"];
            function Validate(oForm) {
                var arrInputs = oForm.getElementsByTagName("input");
                for (var i = 0; i < arrInputs.length; i++) {
                    var oInput = arrInputs[i];
                    if (oInput.type == "file") {
                        var sFileName = oInput.value;
                        if (sFileName.length > 0) {
                            var blnValid = false;
                            for (var j = 0; j < _validFileExtensions.length; j++) {
                                var sCurExtension = _validFileExtensions[j];
                                if (sFileName.substr(sFileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase()) {
                                    blnValid = true;
                                    break;
                                }
                            }
                            if (!blnValid) {
                                alert("Sorry, " + sFileName + " is invalid, allowed extensions are: " + _validFileExtensions.join(", "));
                                return false;
                            }
                        }
                    }
                }
                return true;
            }
        });
        (function () {
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                var forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                var validation = Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
        //-------------------------------------------------------------
         // MAterial Date picker    
    $('#mdate').bootstrapMaterialDatePicker({ weekStart: 0, time: false });
    $('#timepicker').bootstrapMaterialDatePicker({ format: 'HH:mm', time: true, date: false });
    $('#date-format').bootstrapMaterialDatePicker({ format: 'dddd DD MMMM YYYY - HH:mm' });

    $('#min-date').bootstrapMaterialDatePicker({ format: 'DD/MM/YYYY HH:mm', minDate: new Date() });
    // Clock pickers
    $('#single-input').clockpicker({
        placement: 'bottom',
        align: 'left',
        autoclose: true,
        'default': 'now'
    });
    $('.clockpicker').clockpicker({
        donetext: 'Done',
    }).find('input').change(function() {
        console.log(this.value);
    });
    $('#check-minutes').click(function(e) {
        // Have to stop propagation here
        e.stopPropagation();
        input.clockpicker('show').clockpicker('toggleView', 'minutes');
    });
    if (/mobile/i.test(navigator.userAgent)) {
        $('input').prop('readOnly', true);
    }
    // Colorpicker
    $(".colorpicker").asColorPicker();
    $(".complex-colorpicker").asColorPicker({
        mode: 'complex'
    });
    $(".gradient-colorpicker").asColorPicker({
        mode: 'gradient'
    });
    // Date Picker
    jQuery('.mydatepicker, #datepicker').datepicker();
    jQuery('#datepicker-autoclose').datepicker({
        autoclose: true,
        todayHighlight: true
    });
    jQuery('#date-range').datepicker({
        toggleActive: true
    });
    jQuery('#datepicker-inline').datepicker({
        todayHighlight: true
    });
    // -------------------------------
	// Start Date Range Picker
	// -------------------------------

    // Basic Date Range Picker
    $('.daterange').daterangepicker();

    // Date & Time
    $('.datetime').daterangepicker({
        timePicker: true,
        timePickerIncrement: 30,
        locale: {
            format: 'MM/DD/YYYY h:mm A'
        }
    });

    //Calendars are not linked
    $('.timeseconds').daterangepicker({
        timePicker: true,
        timePickerIncrement: 30,
        timePicker24Hour: true,
        timePickerSeconds: true,
        locale: {
            format: 'MM-DD-YYYY h:mm:ss'
        }
    });

    // Single Date Range Picker
    $('.singledate').daterangepicker({
        singleDatePicker: true,
        showDropdowns: true
    });

    // Auto Apply Date Range
    $('.autoapply').daterangepicker({
        autoApply: true,
    });

    // Calendars are not linked
    $('.linkedCalendars').daterangepicker({
        linkedCalendars: false,
    });

    // Date Limit
    $('.dateLimit').daterangepicker({
        dateLimit: {
            days: 7
        },
    });

    // Show Dropdowns
    $('.showdropdowns').daterangepicker({
        showDropdowns: true,
    });

    // Show Week Numbers
    $('.showweeknumbers').daterangepicker({
        showWeekNumbers: true,
    });

     $('.dateranges').daterangepicker({
        ranges: {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        }
    });

    // Always Show Calendar on Ranges
    $('.shawCalRanges').daterangepicker({
        ranges: {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
            'Last 7 Days': [moment().subtract(6, 'days'), moment()],
            'Last 30 Days': [moment().subtract(29, 'days'), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        },
        alwaysShowCalendars: true,
    });

    // Top of the form-control open alignment
    $('.drops').daterangepicker({
        drops: "up" // up/down
    });

    // Custom button options
    $('.buttonClass').daterangepicker({
        drops: "up",
        buttonClasses: "btn",
        applyClass: "btn-info",
        cancelClass: "btn-danger"
    });

	jQuery('#date-range').datepicker({
        toggleActive: true
    });
    jQuery('#datepicker-inline').datepicker({
        todayHighlight: true
    });

    // Daterange picker
    $('.input-daterange-datepicker').daterangepicker({
        buttonClasses: ['btn', 'btn-sm'],
        applyClass: 'btn-danger',
        cancelClass: 'btn-inverse'
    });
    $('.input-daterange-timepicker').daterangepicker({
        timePicker: true,
        format: 'MM/DD/YYYY h:mm A',
        timePickerIncrement: 30,
        timePicker12Hour: true,
        timePickerSeconds: false,
        buttonClasses: ['btn', 'btn-sm'],
        applyClass: 'btn-danger',
        cancelClass: 'btn-inverse'
    });
    $('.input-limit-datepicker').daterangepicker({
        format: 'MM/DD/YYYY',
        minDate: '06/01/2015',
        maxDate: '06/30/2015',
        buttonClasses: ['btn', 'btn-sm'],
        applyClass: 'btn-danger',
        cancelClass: 'btn-inverse',
        dateLimit: {
            days: 6
        }
    });
      //-------------------------------------------------------------
    </script>
}
<!-- ============================================================== -->
<!-- End Right sidebar -->
<!-- ============================================================== -->
