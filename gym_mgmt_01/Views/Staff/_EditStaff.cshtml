@{
    List<SelectListItem> Genderlist = new List<SelectListItem>();
    Genderlist.Add(new SelectListItem() { Text = "--SELECT Gender--", Value = "" });
    Genderlist.Add(new SelectListItem() { Text = "Male", Value = "Male" });
    Genderlist.Add(new SelectListItem() { Text = "Female", Value = "Female" });
    Genderlist.Add(new SelectListItem() { Text = "Other", Value = "Other" });
}
@model gym_mgmt_01.Models.Staff
<div class="modal" id="updateProd" tabindex="-1" role="dialog" aria-labelledby="addcatlabel">
    @using (Html.BeginForm("_EditStaff", "Staff", FormMethod.Post, new { enctype = "multipart/form-data", @Id = "memreg" }))
    {
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="addcatlabel">Edit Staff</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    <form>
                        <input type="hidden" name="id" id="prodID" />
                        @Html.HiddenFor(model => model.StaffID)
                        @Html.HiddenFor(model => model.permission)
                        @Html.HiddenFor(model => model.ConfirmPassword);
                        <div class="form-group">
                            <label for="" class="control-label label1"> First Name :</label>
                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control label2", @placeholder = "First Name", @required = "" } })
                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1"> Last Name :</label>
                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control label2", @placeholder = "Last Name" } })
                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1"> Email Address :</label>
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control label2", @placeholder = "Email", @required = "" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1"> Gender :</label>
                            @Html.DropDownListFor(model => model.Gender, Genderlist, new { @class = " custom-select label2", @placeholder = " Select Gender ", @required = "" })
                            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1"> Password :</label>
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control label2", InputType = "password", @placeholder = "Password", Type = "password", @required = "" } })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1"> Designation :</label>
                            @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control label2", @placeholder = "Designation", @required = "" } })
                            @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <label for="" class="control-label label1">Choose Image :</label>

                            @Html.TextBoxFor(m => m.PostedFile, new { type = "file", @id = "upldImage", @name = "ImageFile" })
                            @Html.ValidationMessageFor(m => m.PostedFile, "", new { @class = "text-danger" })
                            <input type="hidden" id="staffImg" name="ImgURL" value="" />
                            <img src="~/assets/images/products/prod_default.png" id="prodprof1" width="100px" height="100px" style="margin: 15px auto; border: 0px solid #fff; border-radius: 10px;" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-default btn-info">Submit</button>
                    <button type="button" class="btn btn-default btn-info" data-dismiss="modal">Cancel</button>
                </div>
                @Html.ValidationSummary()
            </div>
        </div>
    }
</div>
@section scripts {
   
    <script type="text/javascript">
        $('#upldImage').change(function () {
            readURL(this);
        });
        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    var form = document.querySelector('#memreg');
                    var bool = Validate(form);
                    if (!bool) {
                        $('#prodprof1').attr('src', '/assets/images/users/deafult.png');
                    } else {
                        $('#prodprof1').attr('src', e.target.result);
                    }
                }
                reader.readAsDataURL(input.files[0]);
            }
        }
    </script>
}

